// Code generated by "enumer -type PostType -json"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
)

const _PostTypeName = "PostTypeUnknownPostTypePostPostTypeReply"

var _PostTypeIndex = [...]uint8{0, 15, 27, 40}

func (i PostType) String() string {
	i -= -1
	if i < 0 || i >= PostType(len(_PostTypeIndex)-1) {
		return fmt.Sprintf("PostType(%d)", i+-1)
	}
	return _PostTypeName[_PostTypeIndex[i]:_PostTypeIndex[i+1]]
}

var _PostTypeValues = []PostType{-1, 0, 1}

var _PostTypeNameToValueMap = map[string]PostType{
	_PostTypeName[0:15]:  -1,
	_PostTypeName[15:27]: 0,
	_PostTypeName[27:40]: 1,
}

// PostTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PostTypeString(s string) (PostType, error) {
	if val, ok := _PostTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PostType values", s)
}

// PostTypeValues returns all values of the enum
func PostTypeValues() []PostType {
	return _PostTypeValues
}

// IsAPostType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PostType) IsAPostType() bool {
	for _, v := range _PostTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PostType
func (i PostType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PostType
func (i *PostType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PostType should be a string, got %s", data)
	}

	var err error
	*i, err = PostTypeString(s)
	return err
}
