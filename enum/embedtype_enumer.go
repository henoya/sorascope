// Code generated by "enumer -type EmbedType -json"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
)

const _EmbedTypeName = "EmbedUnknownEmbedNoneEmbedImagesEmbedExternalEmbedRecordEmbedRecordWithMediaEmbedRecordNotFoundEmbedRecordBlockedEmbedFeedGeneratorEmbedGraphListView"

var _EmbedTypeIndex = [...]uint8{0, 12, 21, 32, 45, 56, 76, 95, 113, 131, 149}

func (i EmbedType) String() string {
	i -= -1
	if i < 0 || i >= EmbedType(len(_EmbedTypeIndex)-1) {
		return fmt.Sprintf("EmbedType(%d)", i+-1)
	}
	return _EmbedTypeName[_EmbedTypeIndex[i]:_EmbedTypeIndex[i+1]]
}

var _EmbedTypeValues = []EmbedType{-1, 0, 1, 2, 3, 4, 5, 6, 7, 8}

var _EmbedTypeNameToValueMap = map[string]EmbedType{
	_EmbedTypeName[0:12]:    -1,
	_EmbedTypeName[12:21]:   0,
	_EmbedTypeName[21:32]:   1,
	_EmbedTypeName[32:45]:   2,
	_EmbedTypeName[45:56]:   3,
	_EmbedTypeName[56:76]:   4,
	_EmbedTypeName[76:95]:   5,
	_EmbedTypeName[95:113]:  6,
	_EmbedTypeName[113:131]: 7,
	_EmbedTypeName[131:149]: 8,
}

// EmbedTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EmbedTypeString(s string) (EmbedType, error) {
	if val, ok := _EmbedTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to EmbedType values", s)
}

// EmbedTypeValues returns all values of the enum
func EmbedTypeValues() []EmbedType {
	return _EmbedTypeValues
}

// IsAEmbedType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i EmbedType) IsAEmbedType() bool {
	for _, v := range _EmbedTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for EmbedType
func (i EmbedType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for EmbedType
func (i *EmbedType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("EmbedType should be a string, got %s", data)
	}

	var err error
	*i, err = EmbedTypeString(s)
	return err
}
