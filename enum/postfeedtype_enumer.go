// Code generated by "enumer -type PostFeedType -json"; DO NOT EDIT.

package enum

import (
	"encoding/json"
	"fmt"
)

const _PostFeedTypeName = "PostFeedTypeUnknownPostFeedTypePostViewPostFeedTypePostViewerStatePostFeedTypeFeedViewPostPostFeedTypeReplyRefPostFeedTypeReasonRepostPostFeedTypeThreadViewPostPostFeedTypeNotFoundPostPostFeedTypeBlockedPostPostFeedTypeBlockedAuthorPostFeedTypeGeneratorViewPostFeedTypeGeneratorViewerStatePostFeedTypeSkeletonFeedPostPostFeedTypeSkeletonReasonRepost"

var _PostFeedTypeIndex = [...]uint16{0, 19, 39, 66, 90, 110, 134, 160, 184, 207, 232, 257, 289, 317, 349}

func (i PostFeedType) String() string {
	i -= -1
	if i < 0 || i >= PostFeedType(len(_PostFeedTypeIndex)-1) {
		return fmt.Sprintf("PostFeedType(%d)", i+-1)
	}
	return _PostFeedTypeName[_PostFeedTypeIndex[i]:_PostFeedTypeIndex[i+1]]
}

var _PostFeedTypeValues = []PostFeedType{-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}

var _PostFeedTypeNameToValueMap = map[string]PostFeedType{
	_PostFeedTypeName[0:19]:    -1,
	_PostFeedTypeName[19:39]:   0,
	_PostFeedTypeName[39:66]:   1,
	_PostFeedTypeName[66:90]:   2,
	_PostFeedTypeName[90:110]:  3,
	_PostFeedTypeName[110:134]: 4,
	_PostFeedTypeName[134:160]: 5,
	_PostFeedTypeName[160:184]: 6,
	_PostFeedTypeName[184:207]: 7,
	_PostFeedTypeName[207:232]: 8,
	_PostFeedTypeName[232:257]: 9,
	_PostFeedTypeName[257:289]: 10,
	_PostFeedTypeName[289:317]: 11,
	_PostFeedTypeName[317:349]: 12,
}

// PostFeedTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PostFeedTypeString(s string) (PostFeedType, error) {
	if val, ok := _PostFeedTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PostFeedType values", s)
}

// PostFeedTypeValues returns all values of the enum
func PostFeedTypeValues() []PostFeedType {
	return _PostFeedTypeValues
}

// IsAPostFeedType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PostFeedType) IsAPostFeedType() bool {
	for _, v := range _PostFeedTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PostFeedType
func (i PostFeedType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PostFeedType
func (i *PostFeedType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PostFeedType should be a string, got %s", data)
	}

	var err error
	*i, err = PostFeedTypeString(s)
	return err
}
